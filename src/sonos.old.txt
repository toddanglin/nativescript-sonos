
NOTE: This file has the original NodeJS implementation of the Search class. To implement in {N} plugin will require a socket communication library to replace dgram, capable of communicating over UDP. Kept in project source for now as reference for future TODO to enhance this plugin.


/**
 * Search "Class"
 * Emits 'DeviceAvailable' on a Sonos Component Discovery
 */
var Search = function Search (options) {
  var self = this
  self.foundSonosDevices = {}
  var PLAYER_SEARCH = new Buffer(['M-SEARCH * HTTP/1.1',
    'HOST: 239.255.255.250:1900',
    'MAN: ssdp:discover',
    'MX: 1',
    'ST: urn:schemas-upnp-org:device:ZonePlayer:1'].join('\r\n'))
  var sendDiscover = function () {
    ['239.255.255.250', '255.255.255.255'].map(function (addr) {
      self.socket.send(PLAYER_SEARCH, 0, PLAYER_SEARCH.length, 1900, addr)
    })
    // Periodically send discover packet to find newly added devices
    self.pollTimer = setTimeout(sendDiscover, 10000)
    self.on('timeout', function () {
      clearTimeout(self.pollTimer)
    })
  }
  this.socket = dgram.createSocket('udp4', function (buffer, rinfo) {
    buffer = buffer.toString()
    if (buffer.match(/.+Sonos.+/)) {
      var modelCheck = buffer.match(/SERVER.*\((.*)\)/)
      var model = (modelCheck.length > 1 ? modelCheck[1] : null)
      var addr = rinfo.address
      if (!(addr in self.foundSonosDevices)) {
        var sonos = self.foundSonosDevices[addr] = new Sonos(addr)
        self.emit('DeviceAvailable', sonos, model)
      }
    }
  })
  this.socket.on('error', function (err) {
    self.emit('error', err)
  })
  this.socket.bind(options, function () {
    self.socket.setBroadcast(true)
    sendDiscover()
  })
  if (options.timeout) {
    self.searchTimer = setTimeout(function () {
      self.socket.close()
      self.emit('timeout')
    }, options.timeout)
  }
  return this
}
util.inherits(Search, EventEmitter)

/**
 * Destroys Search class, stop searching, clean up
 *
 * @param  {Function} callback ()
 */
Search.prototype.destroy = function (callback) {
  clearTimeout(this.searchTimer)
  clearTimeout(this.pollTimer)
  this.socket.close(callback)
}

/**
 * Create a Search Instance (emits 'DeviceAvailable' with a found Sonos Component)
 * @param  {Object} options Optional Options to control search behavior.
 *                          Set 'timeout' to how long to search for devices
 *                          (in milliseconds).
 * @param  {Function} listener Optional 'DeviceAvailable' listener (sonos)
 * @return {Search/EventEmitter Instance}
 */
var search = function (options, listener) {
  if (typeof options === 'function') {
    listener = options
    options = null
  }
  options = options || {}
  listener = listener || null
  var search = new Search(options)
  if (listener !== null) {
    search.on('DeviceAvailable', listener)
  }
  return search
}