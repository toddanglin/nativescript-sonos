import { Track, UriObject, PlayModeEnum, SonosState, ZoneAttributes, ZoneInfo } from "./sonos.model";
export declare class Sonos {
    private TRANSPORT_ENDPOINT;
    private RENDERING_ENDPOINT;
    private DEVICE_ENDPOINT;
    private host;
    private port;
    private options;
    constructor(host: string, port?: number, options?: {});
    request: (endpoint: any, action: any, body: any, responseTag: any) => Promise<any>;
    currentTrack: () => Promise<Track>;
    getVolume: () => Promise<number>;
    getMuted: () => Promise<boolean>;
    play: (uri?: string | UriObject) => Promise<boolean>;
    stop: () => Promise<boolean>;
    pause: () => Promise<boolean>;
    flush: () => Promise<any>;
    becomeCoordinatorOfStandaloneGroup: () => Promise<boolean>;
    seek: (seconds: number) => Promise<boolean>;
    next: () => Promise<boolean>;
    previous: () => Promise<boolean>;
    setName: (name: any) => Promise<any>;
    setPlayMode: (playmode: PlayModeEnum) => Promise<any>;
    setVolume: (volume: number) => Promise<any>;
    setMuted: (muted: boolean) => Promise<any>;
    selectTrack: (trackNr?: number) => Promise<boolean>;
    selectQueue: () => Promise<boolean>;
    queue: (uri: string | UriObject, positionInQueue?: number) => Promise<any>;
    getCurrentState: () => Promise<SonosState>;
    getZoneInfo: () => Promise<ZoneInfo>;
    getZoneAttrs: () => Promise<ZoneAttributes>;
    deviceDescription: () => Promise<any>;
    private executeTransportRequest;
    private executeRequest;
    private parseDIDL;
    private withinEnvelope;
    private htmlEntities;
    private optionsFromSpotifyUri;
}
